apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-node-red
  namespace: {{ $.Values.namespace }}
  labels:
    app: node-red
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-red
  template:
    metadata:
      labels:
        app: node-red
    spec:
      initContainers:
      - name: intel-plugin-downloader
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          curl -L https://github.com/open-edge-platform/edge-ai-suites/archive/refs/tags/v1.0.0.zip -o /tmp/main.zip && \
          unzip -q /tmp/main.zip -d /tmp && \
          mkdir -p /tmp/data/public/videos && \
          mkdir -p /tmp/data/nodes/core/function && \
          cp -r /tmp/edge-ai-suites-1.0.0/metro-ai-suite/loitering-detection/node-red/public/* /tmp/data/public/ && \
          cp -r /tmp/edge-ai-suites-1.0.0/metro-ai-suite/loitering-detection/node-red/nodes/core/function/* /tmp/data/nodes/core/function/ && \
          rm -rf /tmp/main.zip /tmp/edge-ai-suites-1.0.0 && \
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000101.mp4 -o /tmp/data/public/videos/VIRAT_S_000101.mp4 && \
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000102.mp4 -o /tmp/data/public/videos/VIRAT_S_000102.mp4 && \
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000103.mp4 -o /tmp/data/public/videos/VIRAT_S_000103.mp4 && \
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000104.mp4 -o /tmp/data/public/videos/VIRAT_S_000104.mp4 && \
          cat > /tmp/data/install_package.sh << 'EOF'
          #!/bin/bash
          
          npm install node-red-contrib-image-tools
          npm install node-red-contrib-image-output
          npm install node-red-node-annotate-image
          npm install node-red-node-ui-iframe
          apk update
          apk add --no-cache ffmpeg
          EOF
          chmod +x /tmp/data/install_package.sh && \
          ls -l /tmp/data/public && \
          ls -l /tmp/data/nodes/core/function
        env:
        - name: http_proxy
          value: {{ $.Values.env.http_proxy }}
        - name: https_proxy
          value: {{ $.Values.env.https_proxy }}
        - name: no_proxy
          value: "{{ $.Values.env.no_proxy }},{{ $.Values.env.HOST_IP }}"
        volumeMounts:
        - name: node-red-data-public
          mountPath: /tmp/data/public
        - name: node-red-data-core
          mountPath: /tmp/data/nodes/core/function
        - name: node-red-data-script
          mountPath: /tmp/data
      containers:
      - name: node-red
        image: {{ $.Values.node_red.image }}:{{ $.Values.node_red.imageTag }}
        command: ["/bin/bash", "-c"]
        args: ["/data/install_package.sh && /usr/src/node-red/entrypoint.sh"]
        ports:
        - containerPort: {{ $.Values.config.node_red.int.web_ui_port }}
          name: http
        env:
        - name: http_proxy
          value: {{ $.Values.env.http_proxy }}
        - name: https_proxy
          value: {{ $.Values.env.https_proxy }}
        - name: no_proxy
          value: "{{ $.Values.env.no_proxy }},{{ $.Values.env.HOST_IP }}"
        securityContext:
          runAsUser: 0  # root user
        volumeMounts:
        - name: node-red-data-public
          mountPath: /data/public
        - name: node-red-data-core
          mountPath: /data/nodes/core/function
        - name: node-red-data-script
          mountPath: /data/install_package.sh
          subPath: install_package.sh
        - name: node-red-flows-config
          mountPath: /data/flows.json
          subPath: flows.json
      volumes:
      - name: node-red-data-public
        emptyDir:
          sizeLimit: 100Mi
      - name: node-red-data-core
        emptyDir:
          sizeLimit: 100Mi 
      - name: node-red-data-script
        emptyDir:
          sizeLimit: 10Mi
      - name: node-red-flows-config
        configMap:
          name: node-red-flows-config 
---
apiVersion: v1
kind: Service
metadata:
  name: node-red
  namespace: {{ $.Values.namespace }}
  labels:
    app: node-red
spec:
  type: NodePort
  ports:
  - port: {{ $.Values.config.node_red.int.web_ui_port }}
    targetPort: {{ $.Values.config.node_red.int.web_ui_port }}
    protocol: TCP
    name: http
    nodePort: {{ $.Values.config.node_red.ext.web_ui_port }}
  selector:
    app: node-red
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespace }}
  name: node-red-flows-config
data:
  flows.json: |-
{{ .Files.Get "config/node-red/flows.json" | indent 4 }}
